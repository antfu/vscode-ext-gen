// This file is generated by `vscode-ext-gen`. Do not modify manually.
// @see https://github.com/antfu/vscode-ext-gen

// Meta info
export const publisher = "lokalise"
export const name = "i18n-ally"
export const version = "2.12.0"
export const displayName = "i18n Ally"
export const description = "üåç All in one i18n extension for VS Code"
export const extensionId = `${publisher}.${name}`

/**
 * Type union of all commands
 */
export type CommandKey = 
  | "i18n-ally.config-locales"
  | "i18n-ally.config-locales-auto"
  | "i18n-ally.config-display-language"
  | "i18n-ally.config-source-language"
  | "i18n-ally.set-display-language"
  | "i18n-ally.set-source-language"
  | "i18n-ally.copy-key"
  | "i18n-ally.translate-key"
  | "i18n-ally.edit-key"
  | "i18n-ally.open-key"
  | "i18n-ally.delete-key"
  | "i18n-ally.rename-key"
  | "i18n-ally.extract-text"
  | "i18n-ally.extract-hard-strings-batch"
  | "i18n-ally.detect_hard_strings"
  | "i18n-ally.open-url"
  | "i18n-ally.fulfill-keys"
  | "i18n-ally.refresh-usage"
  | "i18n-ally.support"
  | "i18n-ally.locale-visibility-show"
  | "i18n-ally.locale-visibility-hide"
  | "i18n-ally.new-key"
  | "i18n-ally.duplicate-key"
  | "i18n-ally.mark-key-as-in-use"
  | "i18n-ally.open-in-editor"
  | "i18n-ally.open-editor"
  | "i18n-ally.review.comment"
  | "i18n-ally.review.approve"
  | "i18n-ally.review.request-change"
  | "i18n-ally.review.edit"
  | "i18n-ally.review.resolve"
  | "i18n-ally.review.resolve-thread"
  | "i18n-ally.review.apply-translation"
  | "i18n-ally.review.apply-suggestion"
  | "i18n-ally.insert-key"
  | "i18n-ally.deepl-usage"
  | "i18n-ally.go-to-range"
  | "i18n-ally.go-to-next-usage"
  | "i18n-ally.go-to-prev-usage"
  | "i18n-ally.open-docs-hard-string"
  | "i18n-ally.extract-disable-auto-detect"
  | "i18n-ally.extract-enable-auto-detect"

/**
 * Commands map registed by `lokalise.i18n-ally`
 */
export const commands = {
  /**
   * %command.config_locales%
   * @value `i18n-ally.config-locales`
   */
  configLocales: "i18n-ally.config-locales",
  /**
   * %command.config_locales_auto%
   * @value `i18n-ally.config-locales-auto`
   */
  configLocalesAuto: "i18n-ally.config-locales-auto",
  /**
   * %command.config_display_language%
   * @value `i18n-ally.config-display-language`
   */
  configDisplayLanguage: "i18n-ally.config-display-language",
  /**
   * %command.config_source_language%
   * @value `i18n-ally.config-source-language`
   */
  configSourceLanguage: "i18n-ally.config-source-language",
  /**
   * %command.set_display_language%
   * @value `i18n-ally.set-display-language`
   */
  setDisplayLanguage: "i18n-ally.set-display-language",
  /**
   * %command.set_source_language%
   * @value `i18n-ally.set-source-language`
   */
  setSourceLanguage: "i18n-ally.set-source-language",
  /**
   * %command.copy_key%
   * @value `i18n-ally.copy-key`
   */
  copyKey: "i18n-ally.copy-key",
  /**
   * %command.translate_key%
   * @value `i18n-ally.translate-key`
   */
  translateKey: "i18n-ally.translate-key",
  /**
   * %command.edit_key%
   * @value `i18n-ally.edit-key`
   */
  editKey: "i18n-ally.edit-key",
  /**
   * %command.open_key%
   * @value `i18n-ally.open-key`
   */
  openKey: "i18n-ally.open-key",
  /**
   * %command.delete_key%
   * @value `i18n-ally.delete-key`
   */
  deleteKey: "i18n-ally.delete-key",
  /**
   * %command.rename_key%
   * @value `i18n-ally.rename-key`
   */
  renameKey: "i18n-ally.rename-key",
  /**
   * %refactor.extract_text%
   * @value `i18n-ally.extract-text`
   */
  extractText: "i18n-ally.extract-text",
  /**
   * Extract all hard-coded strings (experimental)
   * @value `i18n-ally.extract-hard-strings-batch`
   */
  extractHardStringsBatch: "i18n-ally.extract-hard-strings-batch",
  /**
   * Detect hard-coded strings in current file (experimental)
   * @value `i18n-ally.detect_hard_strings`
   */
  detectHardStrings: "i18n-ally.detect_hard_strings",
  /**
   * %command.open_url%
   * @value `i18n-ally.open-url`
   */
  openUrl: "i18n-ally.open-url",
  /**
   * %command.fulfill_keys%
   * @value `i18n-ally.fulfill-keys`
   */
  fulfillKeys: "i18n-ally.fulfill-keys",
  /**
   * %command.refresh_usage%
   * @value `i18n-ally.refresh-usage`
   */
  refreshUsage: "i18n-ally.refresh-usage",
  /**
   * %feedback.support%
   * @value `i18n-ally.support`
   */
  support: "i18n-ally.support",
  /**
   * %command.locale_visibility_show%
   * @value `i18n-ally.locale-visibility-show`
   */
  localeVisibilityShow: "i18n-ally.locale-visibility-show",
  /**
   * %command.locale_visibility_hide%
   * @value `i18n-ally.locale-visibility-hide`
   */
  localeVisibilityHide: "i18n-ally.locale-visibility-hide",
  /**
   * %command.new_key%
   * @value `i18n-ally.new-key`
   */
  newKey: "i18n-ally.new-key",
  /**
   * %command.duplicate_key%
   * @value `i18n-ally.duplicate-key`
   */
  duplicateKey: "i18n-ally.duplicate-key",
  /**
   * %command.mark_key_as_in_use%
   * @value `i18n-ally.mark-key-as-in-use`
   */
  markKeyAsInUse: "i18n-ally.mark-key-as-in-use",
  /**
   * %command.open_in_editor%
   * @value `i18n-ally.open-in-editor`
   */
  openInEditor: "i18n-ally.open-in-editor",
  /**
   * %command.open_editor%
   * @value `i18n-ally.open-editor`
   */
  openEditor: "i18n-ally.open-editor",
  /**
   * %review.leave_comment%
   * @value `i18n-ally.review.comment`
   */
  reviewComment: "i18n-ally.review.comment",
  /**
   * %review.approve%
   * @value `i18n-ally.review.approve`
   */
  reviewApprove: "i18n-ally.review.approve",
  /**
   * %review.request_change%
   * @value `i18n-ally.review.request-change`
   */
  reviewRequestChange: "i18n-ally.review.request-change",
  /**
   * %review.edit%
   * @value `i18n-ally.review.edit`
   */
  reviewEdit: "i18n-ally.review.edit",
  /**
   * %review.resolve%
   * @value `i18n-ally.review.resolve`
   */
  reviewResolve: "i18n-ally.review.resolve",
  /**
   * %review.resolve_all%
   * @value `i18n-ally.review.resolve-thread`
   */
  reviewResolveThread: "i18n-ally.review.resolve-thread",
  /**
   * %review.apply_translation_candidate%
   * @value `i18n-ally.review.apply-translation`
   */
  reviewApplyTranslation: "i18n-ally.review.apply-translation",
  /**
   * %review.apply_suggestion%
   * @value `i18n-ally.review.apply-suggestion`
   */
  reviewApplySuggestion: "i18n-ally.review.apply-suggestion",
  /**
   * %command.insert_key%
   * @value `i18n-ally.insert-key`
   */
  insertKey: "i18n-ally.insert-key",
  /**
   * %command.deepl_usage%
   * @value `i18n-ally.deepl-usage`
   */
  deeplUsage: "i18n-ally.deepl-usage",
  /**
   * %command.go_to_range%
   * @value `i18n-ally.go-to-range`
   */
  goToRange: "i18n-ally.go-to-range",
  /**
   * %command.go_to_next_usage%
   * @value `i18n-ally.go-to-next-usage`
   */
  goToNextUsage: "i18n-ally.go-to-next-usage",
  /**
   * %command.go_to_prev_usage%
   * @value `i18n-ally.go-to-prev-usage`
   */
  goToPrevUsage: "i18n-ally.go-to-prev-usage",
  /**
   * %command.show_docs%
   * @value `i18n-ally.open-docs-hard-string`
   */
  openDocsHardString: "i18n-ally.open-docs-hard-string",
  /**
   * %command.extract.disable-auto-detect%
   * @value `i18n-ally.extract-disable-auto-detect`
   */
  extractDisableAutoDetect: "i18n-ally.extract-disable-auto-detect",
  /**
   * %command.extract.enable-auto-detect%
   * @value `i18n-ally.extract-enable-auto-detect`
   */
  extractEnableAutoDetect: "i18n-ally.extract-enable-auto-detect",
} satisfies Record<string, CommandKey>

/**
 * Type union of all configs
 */
export type ConfigKey = 
  | "i18n-ally.disabled"
  | "i18n-ally.autoDetection"
  | "i18n-ally.localesPaths"
  | "i18n-ally.encoding"
  | "i18n-ally.sourceLanguage"
  | "i18n-ally.displayLanguage"
  | "i18n-ally.ignoredLocales"
  | "i18n-ally.keystyle"
  | "i18n-ally.dirStructure"
  | "i18n-ally.annotations"
  | "i18n-ally.annotationInPlace"
  | "i18n-ally.annotationMaxLength"
  | "i18n-ally.annotationDelimiter"
  | "i18n-ally.includeSubfolders"
  | "i18n-ally.fullReloadOnChanged"
  | "i18n-ally.showFlags"
  | "i18n-ally.enabledFrameworks"
  | "i18n-ally.enabledParsers"
  | "i18n-ally.keysInUse"
  | "i18n-ally.sortKeys"
  | "i18n-ally.sortCompare"
  | "i18n-ally.sortLocale"
  | "i18n-ally.preferredDelimiter"
  | "i18n-ally.readonly"
  | "i18n-ally.keepFulfilled"
  | "i18n-ally.localeCountryMap"
  | "i18n-ally.indent"
  | "i18n-ally.disablePathParsing"
  | "i18n-ally.tabStyle"
  | "i18n-ally.namespace"
  | "i18n-ally.pathMatcher"
  | "i18n-ally.languageTagSystem"
  | "i18n-ally.ignoreFiles"
  | "i18n-ally.theme.annotation"
  | "i18n-ally.theme.annotationMissing"
  | "i18n-ally.theme.annotationBorder"
  | "i18n-ally.theme.annotationMissingBorder"
  | "i18n-ally.regex.key"
  | "i18n-ally.regex.usageMatch"
  | "i18n-ally.regex.usageMatchAppend"
  | "i18n-ally.refactor.templates"
  | "i18n-ally.translate.saveAsCandidates"
  | "i18n-ally.translate.fallbackToKey"
  | "i18n-ally.translate.engines"
  | "i18n-ally.translate.parallels"
  | "i18n-ally.translate.promptSource"
  | "i18n-ally.translate.overrideExisting"
  | "i18n-ally.translate.google.apiKey"
  | "i18n-ally.translate.deepl.apiKey"
  | "i18n-ally.translate.baidu.appid"
  | "i18n-ally.translate.baidu.apiSecret"
  | "i18n-ally.translate.deepl.enableLog"
  | "i18n-ally.translate.deepl.useFreeApiEntry"
  | "i18n-ally.translate.libre.apiRoot"
  | "i18n-ally.translate.openai.apiKey"
  | "i18n-ally.translate.openai.apiRoot"
  | "i18n-ally.translate.openai.apiModel"
  | "i18n-ally.usage.scanningIgnore"
  | "i18n-ally.usage.derivedKeyRules"
  | "i18n-ally.frameworks.ruby-rails.scopeRoot"
  | "i18n-ally.parsers.typescript.tsNodePath"
  | "i18n-ally.parsers.typescript.compilerOptions"
  | "i18n-ally.parsers.extendFileExtensions"
  | "i18n-ally.review.enabled"
  | "i18n-ally.review.gutters"
  | "i18n-ally.review.user.name"
  | "i18n-ally.review.user.email"
  | "i18n-ally.review.removeCommentOnResolved"
  | "i18n-ally.editor.preferEditor"
  | "i18n-ally.extract.keygenStrategy"
  | "i18n-ally.extract.keygenStyle"
  | "i18n-ally.extract.keyPrefix"
  | "i18n-ally.extract.keyMaxLength"
  | "i18n-ally.extract.targetPickingStrategy"
  | "i18n-ally.extract.parsers.html"
  | "i18n-ally.extract.parsers.babel"
  | "i18n-ally.extract.autoDetect"
  | "i18n-ally.extract.ignored"
  | "i18n-ally.extract.ignoredByFiles"
  | "i18n-ally.parserOptions"
  | "i18n-ally.defaultNamespace"
  | "i18n-ally.derivedKeyRules"
  | "i18n-ally.filenameMatchRegex"
  | "i18n-ally.fileNamespace"
  | "i18n-ally.keyMatchRegex"
  | "vue-i18n-ally.localesPaths"
  | "vue-i18n-ally.encoding"
  | "vue-i18n-ally.sourceLanguage"
  | "vue-i18n-ally.displayLanguage"
  | "vue-i18n-ally.ignoredLocales"
  | "vue-i18n-ally.keystyle"
  | "vue-i18n-ally.dirStructure"
  | "vue-i18n-ally.annotations"
  | "vue-i18n-ally.annotationMaxLength"
  | "vue-i18n-ally.annotationDelimiter"
  | "vue-i18n-ally.filenameMatchRegex"
  | "vue-i18n-ally.includeSubfolders"
  | "vue-i18n-ally.fullReloadOnChanged"
  | "vue-i18n-ally.sortKeys"
  | "vue-i18n-ally.preferredDelimiter"
  | "vue-i18n-ally.readonly"

export interface ConfigKeyTypeMap {
  "i18n-ally.disabled": boolean,
  "i18n-ally.autoDetection": boolean,
  "i18n-ally.localesPaths": (string | string[] | undefined),
  "i18n-ally.encoding": string,
  "i18n-ally.sourceLanguage": (string | undefined),
  "i18n-ally.displayLanguage": (string | undefined),
  "i18n-ally.ignoredLocales": (unknown[] | undefined),
  "i18n-ally.keystyle": ("auto" | "nested" | "flat" | undefined),
  "i18n-ally.dirStructure": ("auto" | "file" | "dir" | undefined),
  "i18n-ally.annotations": boolean,
  "i18n-ally.annotationInPlace": boolean,
  "i18n-ally.annotationMaxLength": number,
  "i18n-ally.annotationDelimiter": string,
  "i18n-ally.includeSubfolders": boolean,
  "i18n-ally.fullReloadOnChanged": boolean,
  "i18n-ally.showFlags": boolean,
  "i18n-ally.enabledFrameworks": (("vue" | "react" | "vscode" | "ngx-translate" | "i18next" | "react-i18next" | "i18next-shopify" | "i18n-tag" | "flutter" | "vue-sfc" | "ember" | "chrome-ext" | "ruby-rails" | "custom" | "laravel" | "transloco" | "svelte" | "globalize" | "ui5" | "next-translate" | "php-gettext" | "general" | "lingui" | "jekyll" | "fluent-vue" | "fluent-vue-sfc" | "next-intl" | "next-international")[] | undefined),
  "i18n-ally.enabledParsers": (("js" | "ts" | "json" | "json5" | "yaml" | "ini" | "po" | "php" | "properties" | "ftl")[] | undefined),
  "i18n-ally.keysInUse": (string[] | undefined),
  "i18n-ally.sortKeys": boolean,
  "i18n-ally.sortCompare": ("binary" | "locale"),
  "i18n-ally.sortLocale": (string | undefined),
  "i18n-ally.preferredDelimiter": string,
  "i18n-ally.readonly": boolean,
  "i18n-ally.keepFulfilled": boolean,
  "i18n-ally.localeCountryMap": Record<string, unknown>,
  "i18n-ally.indent": number,
  "i18n-ally.disablePathParsing": boolean,
  "i18n-ally.tabStyle": ("space" | "tab"),
  "i18n-ally.namespace": (boolean | undefined),
  "i18n-ally.pathMatcher": (string | undefined),
  "i18n-ally.languageTagSystem": ("bcp47" | "legacy" | "none"),
  "i18n-ally.ignoreFiles": (unknown[] | undefined),
  "i18n-ally.theme.annotation": string,
  "i18n-ally.theme.annotationMissing": string,
  "i18n-ally.theme.annotationBorder": string,
  "i18n-ally.theme.annotationMissingBorder": string,
  "i18n-ally.regex.key": (string | undefined),
  "i18n-ally.regex.usageMatch": (string[] | undefined),
  "i18n-ally.regex.usageMatchAppend": (string[] | undefined),
  "i18n-ally.refactor.templates": ({ 'source': ("html-attribute" | "html-inline" | "js-string" | "js-template" | "jsx-text"); 'template': string; 'templates': string[]; 'include': string[]; 'exclude': string[] }[] | undefined),
  "i18n-ally.translate.saveAsCandidates": boolean,
  "i18n-ally.translate.fallbackToKey": boolean,
  "i18n-ally.translate.engines": ("google" | "google-cn" | "deepl" | "libretranslate" | "baidu" | "openai")[],
  "i18n-ally.translate.parallels": number,
  "i18n-ally.translate.promptSource": boolean,
  "i18n-ally.translate.overrideExisting": boolean,
  "i18n-ally.translate.google.apiKey": (string | null),
  "i18n-ally.translate.deepl.apiKey": (string | null),
  "i18n-ally.translate.baidu.appid": (string | null),
  "i18n-ally.translate.baidu.apiSecret": (string | null),
  "i18n-ally.translate.deepl.enableLog": boolean,
  "i18n-ally.translate.deepl.useFreeApiEntry": boolean,
  "i18n-ally.translate.libre.apiRoot": string,
  "i18n-ally.translate.openai.apiKey": (string | null),
  "i18n-ally.translate.openai.apiRoot": string,
  "i18n-ally.translate.openai.apiModel": ("gpt-3.5-turbo" | "gpt-3.5-turbo-16k" | "gpt-3.5-turbo-0301" | "gpt-3.5-turbo-0613" | "gpt-4" | "gpt-4-0314" | "gpt-4-0613" | "gpt-4-32k" | "gpt-4-32k-0314" | "gpt-4-32k-0613"),
  "i18n-ally.usage.scanningIgnore": (string[] | undefined),
  "i18n-ally.usage.derivedKeyRules": (string[] | null),
  "i18n-ally.frameworks.ruby-rails.scopeRoot": string,
  "i18n-ally.parsers.typescript.tsNodePath": string,
  "i18n-ally.parsers.typescript.compilerOptions": Record<string, unknown>,
  "i18n-ally.parsers.extendFileExtensions": Record<string, unknown>,
  "i18n-ally.review.enabled": boolean,
  "i18n-ally.review.gutters": boolean,
  "i18n-ally.review.user.name": (string | undefined),
  "i18n-ally.review.user.email": (string | undefined),
  "i18n-ally.review.removeCommentOnResolved": boolean,
  "i18n-ally.editor.preferEditor": boolean,
  "i18n-ally.extract.keygenStrategy": ("slug" | "random" | "empty" | "source"),
  "i18n-ally.extract.keygenStyle": ("default" | "kebab-case" | "snake_case" | "camelCase" | "PascalCase" | "ALL_CAPS"),
  "i18n-ally.extract.keyPrefix": string,
  "i18n-ally.extract.keyMaxLength": (number | null),
  "i18n-ally.extract.targetPickingStrategy": ("none" | "most-similar" | "most-similar-by-key" | "file-previous" | "global-previous"),
  "i18n-ally.extract.parsers.html": Record<string, unknown>,
  "i18n-ally.extract.parsers.babel": Record<string, unknown>,
  "i18n-ally.extract.autoDetect": boolean,
  "i18n-ally.extract.ignored": (string[] | undefined),
  "i18n-ally.extract.ignoredByFiles": Record<string, unknown>,
  "i18n-ally.parserOptions": Record<string, unknown>,
  "i18n-ally.defaultNamespace": (string | undefined),
  "i18n-ally.derivedKeyRules": (unknown | undefined),
  "i18n-ally.filenameMatchRegex": (unknown | undefined),
  "i18n-ally.fileNamespace": (unknown | undefined),
  "i18n-ally.keyMatchRegex": (unknown | undefined),
  "vue-i18n-ally.localesPaths": (unknown | undefined),
  "vue-i18n-ally.encoding": (unknown | undefined),
  "vue-i18n-ally.sourceLanguage": (unknown | undefined),
  "vue-i18n-ally.displayLanguage": (unknown | undefined),
  "vue-i18n-ally.ignoredLocales": (unknown | undefined),
  "vue-i18n-ally.keystyle": (unknown | undefined),
  "vue-i18n-ally.dirStructure": (unknown | undefined),
  "vue-i18n-ally.annotations": (unknown | undefined),
  "vue-i18n-ally.annotationMaxLength": (unknown | undefined),
  "vue-i18n-ally.annotationDelimiter": (unknown | undefined),
  "vue-i18n-ally.filenameMatchRegex": (unknown | undefined),
  "vue-i18n-ally.includeSubfolders": (unknown | undefined),
  "vue-i18n-ally.fullReloadOnChanged": (unknown | undefined),
  "vue-i18n-ally.sortKeys": (unknown | undefined),
  "vue-i18n-ally.preferredDelimiter": (unknown | undefined),
  "vue-i18n-ally.readonly": (unknown | undefined),
}

export interface ConfigShorthandMap {
  disabled: "i18n-ally.disabled",
  autoDetection: "i18n-ally.autoDetection",
  localesPaths: "i18n-ally.localesPaths",
  encoding: "i18n-ally.encoding",
  sourceLanguage: "i18n-ally.sourceLanguage",
  displayLanguage: "i18n-ally.displayLanguage",
  ignoredLocales: "i18n-ally.ignoredLocales",
  keystyle: "i18n-ally.keystyle",
  dirStructure: "i18n-ally.dirStructure",
  annotations: "i18n-ally.annotations",
  annotationInPlace: "i18n-ally.annotationInPlace",
  annotationMaxLength: "i18n-ally.annotationMaxLength",
  annotationDelimiter: "i18n-ally.annotationDelimiter",
  includeSubfolders: "i18n-ally.includeSubfolders",
  fullReloadOnChanged: "i18n-ally.fullReloadOnChanged",
  showFlags: "i18n-ally.showFlags",
  enabledFrameworks: "i18n-ally.enabledFrameworks",
  enabledParsers: "i18n-ally.enabledParsers",
  keysInUse: "i18n-ally.keysInUse",
  sortKeys: "i18n-ally.sortKeys",
  sortCompare: "i18n-ally.sortCompare",
  sortLocale: "i18n-ally.sortLocale",
  preferredDelimiter: "i18n-ally.preferredDelimiter",
  readonly: "i18n-ally.readonly",
  keepFulfilled: "i18n-ally.keepFulfilled",
  localeCountryMap: "i18n-ally.localeCountryMap",
  indent: "i18n-ally.indent",
  disablePathParsing: "i18n-ally.disablePathParsing",
  tabStyle: "i18n-ally.tabStyle",
  namespace: "i18n-ally.namespace",
  pathMatcher: "i18n-ally.pathMatcher",
  languageTagSystem: "i18n-ally.languageTagSystem",
  ignoreFiles: "i18n-ally.ignoreFiles",
  themeAnnotation: "i18n-ally.theme.annotation",
  themeAnnotationMissing: "i18n-ally.theme.annotationMissing",
  themeAnnotationBorder: "i18n-ally.theme.annotationBorder",
  themeAnnotationMissingBorder: "i18n-ally.theme.annotationMissingBorder",
  regexKey: "i18n-ally.regex.key",
  regexUsageMatch: "i18n-ally.regex.usageMatch",
  regexUsageMatchAppend: "i18n-ally.regex.usageMatchAppend",
  refactorTemplates: "i18n-ally.refactor.templates",
  translateSaveAsCandidates: "i18n-ally.translate.saveAsCandidates",
  translateFallbackToKey: "i18n-ally.translate.fallbackToKey",
  translateEngines: "i18n-ally.translate.engines",
  translateParallels: "i18n-ally.translate.parallels",
  translatePromptSource: "i18n-ally.translate.promptSource",
  translateOverrideExisting: "i18n-ally.translate.overrideExisting",
  translateGoogleApiKey: "i18n-ally.translate.google.apiKey",
  translateDeeplApiKey: "i18n-ally.translate.deepl.apiKey",
  translateBaiduAppid: "i18n-ally.translate.baidu.appid",
  translateBaiduApiSecret: "i18n-ally.translate.baidu.apiSecret",
  translateDeeplEnableLog: "i18n-ally.translate.deepl.enableLog",
  translateDeeplUseFreeApiEntry: "i18n-ally.translate.deepl.useFreeApiEntry",
  translateLibreApiRoot: "i18n-ally.translate.libre.apiRoot",
  translateOpenaiApiKey: "i18n-ally.translate.openai.apiKey",
  translateOpenaiApiRoot: "i18n-ally.translate.openai.apiRoot",
  translateOpenaiApiModel: "i18n-ally.translate.openai.apiModel",
  usageScanningIgnore: "i18n-ally.usage.scanningIgnore",
  usageDerivedKeyRules: "i18n-ally.usage.derivedKeyRules",
  frameworksRubyRailsScopeRoot: "i18n-ally.frameworks.ruby-rails.scopeRoot",
  parsersTypescriptTsNodePath: "i18n-ally.parsers.typescript.tsNodePath",
  parsersTypescriptCompilerOptions: "i18n-ally.parsers.typescript.compilerOptions",
  parsersExtendFileExtensions: "i18n-ally.parsers.extendFileExtensions",
  reviewEnabled: "i18n-ally.review.enabled",
  reviewGutters: "i18n-ally.review.gutters",
  reviewUserName: "i18n-ally.review.user.name",
  reviewUserEmail: "i18n-ally.review.user.email",
  reviewRemoveCommentOnResolved: "i18n-ally.review.removeCommentOnResolved",
  editorPreferEditor: "i18n-ally.editor.preferEditor",
  extractKeygenStrategy: "i18n-ally.extract.keygenStrategy",
  extractKeygenStyle: "i18n-ally.extract.keygenStyle",
  extractKeyPrefix: "i18n-ally.extract.keyPrefix",
  extractKeyMaxLength: "i18n-ally.extract.keyMaxLength",
  extractTargetPickingStrategy: "i18n-ally.extract.targetPickingStrategy",
  extractParsersHtml: "i18n-ally.extract.parsers.html",
  extractParsersBabel: "i18n-ally.extract.parsers.babel",
  extractAutoDetect: "i18n-ally.extract.autoDetect",
  extractIgnored: "i18n-ally.extract.ignored",
  extractIgnoredByFiles: "i18n-ally.extract.ignoredByFiles",
  parserOptions: "i18n-ally.parserOptions",
  defaultNamespace: "i18n-ally.defaultNamespace",
  derivedKeyRules: "i18n-ally.derivedKeyRules",
  filenameMatchRegex: "i18n-ally.filenameMatchRegex",
  fileNamespace: "i18n-ally.fileNamespace",
  keyMatchRegex: "i18n-ally.keyMatchRegex",
  vueI18nAllyLocalesPaths: "vue-i18n-ally.localesPaths",
  vueI18nAllyEncoding: "vue-i18n-ally.encoding",
  vueI18nAllySourceLanguage: "vue-i18n-ally.sourceLanguage",
  vueI18nAllyDisplayLanguage: "vue-i18n-ally.displayLanguage",
  vueI18nAllyIgnoredLocales: "vue-i18n-ally.ignoredLocales",
  vueI18nAllyKeystyle: "vue-i18n-ally.keystyle",
  vueI18nAllyDirStructure: "vue-i18n-ally.dirStructure",
  vueI18nAllyAnnotations: "vue-i18n-ally.annotations",
  vueI18nAllyAnnotationMaxLength: "vue-i18n-ally.annotationMaxLength",
  vueI18nAllyAnnotationDelimiter: "vue-i18n-ally.annotationDelimiter",
  vueI18nAllyFilenameMatchRegex: "vue-i18n-ally.filenameMatchRegex",
  vueI18nAllyIncludeSubfolders: "vue-i18n-ally.includeSubfolders",
  vueI18nAllyFullReloadOnChanged: "vue-i18n-ally.fullReloadOnChanged",
  vueI18nAllySortKeys: "vue-i18n-ally.sortKeys",
  vueI18nAllyPreferredDelimiter: "vue-i18n-ally.preferredDelimiter",
  vueI18nAllyReadonly: "vue-i18n-ally.readonly",
}

export interface ConfigItem<T extends keyof ConfigKeyTypeMap> {
  key: T,
  default: ConfigKeyTypeMap[T],
}


/**
 * Configs map registed by `lokalise.i18n-ally`
 */
export const configs = {
  /**
   * %config.disabled%
   * @key `i18n-ally.disabled`
   * @default `false`
   * @type `boolean`
   */
  disabled: {
    key: "i18n-ally.disabled",
    default: false,
  } as ConfigItem<"i18n-ally.disabled">,
  /**
   * %config.auto_detection%
   * @key `i18n-ally.autoDetection`
   * @default `true`
   * @type `boolean`
   */
  autoDetection: {
    key: "i18n-ally.autoDetection",
    default: true,
  } as ConfigItem<"i18n-ally.autoDetection">,
  /**
   * %config.locales_paths%
   * @key `i18n-ally.localesPaths`
   * @default `undefined`
   * @type `string,array`
   */
  localesPaths: {
    key: "i18n-ally.localesPaths",
    default: undefined,
  } as ConfigItem<"i18n-ally.localesPaths">,
  /**
   * %config.encoding%
   * @key `i18n-ally.encoding`
   * @default `"utf-8"`
   * @type `string`
   */
  encoding: {
    key: "i18n-ally.encoding",
    default: "utf-8",
  } as ConfigItem<"i18n-ally.encoding">,
  /**
   * %config.source_language%
   * @key `i18n-ally.sourceLanguage`
   * @default `undefined`
   * @type `string`
   */
  sourceLanguage: {
    key: "i18n-ally.sourceLanguage",
    default: undefined,
  } as ConfigItem<"i18n-ally.sourceLanguage">,
  /**
   * %config.display_language%
   * @key `i18n-ally.displayLanguage`
   * @default `undefined`
   * @type `string`
   */
  displayLanguage: {
    key: "i18n-ally.displayLanguage",
    default: undefined,
  } as ConfigItem<"i18n-ally.displayLanguage">,
  /**
   * %config.ignored_locales%
   * @key `i18n-ally.ignoredLocales`
   * @default `undefined`
   * @type `array`
   */
  ignoredLocales: {
    key: "i18n-ally.ignoredLocales",
    default: undefined,
  } as ConfigItem<"i18n-ally.ignoredLocales">,
  /**
   * %config.keystyle%
   * @key `i18n-ally.keystyle`
   * @default `undefined`
   * @type `string`
   */
  keystyle: {
    key: "i18n-ally.keystyle",
    default: undefined,
  } as ConfigItem<"i18n-ally.keystyle">,
  /**
   * %config.dir_structure%
   * @key `i18n-ally.dirStructure`
   * @default `undefined`
   * @type `string`
   */
  dirStructure: {
    key: "i18n-ally.dirStructure",
    default: undefined,
  } as ConfigItem<"i18n-ally.dirStructure">,
  /**
   * %config.annotations%
   * @key `i18n-ally.annotations`
   * @default `true`
   * @type `boolean`
   */
  annotations: {
    key: "i18n-ally.annotations",
    default: true,
  } as ConfigItem<"i18n-ally.annotations">,
  /**
   * %config.annotation_in_place%
   * @key `i18n-ally.annotationInPlace`
   * @default `true`
   * @type `boolean`
   */
  annotationInPlace: {
    key: "i18n-ally.annotationInPlace",
    default: true,
  } as ConfigItem<"i18n-ally.annotationInPlace">,
  /**
   * %config.annotation_max_length%
   * @key `i18n-ally.annotationMaxLength`
   * @default `40`
   * @type `number`
   */
  annotationMaxLength: {
    key: "i18n-ally.annotationMaxLength",
    default: 40,
  } as ConfigItem<"i18n-ally.annotationMaxLength">,
  /**
   * %config.annotation_delimiter%
   * @key `i18n-ally.annotationDelimiter`
   * @default `"¬∑"`
   * @type `string`
   */
  annotationDelimiter: {
    key: "i18n-ally.annotationDelimiter",
    default: "¬∑",
  } as ConfigItem<"i18n-ally.annotationDelimiter">,
  /**
   * %config.include_subfolders%
   * @key `i18n-ally.includeSubfolders`
   * @default `true`
   * @type `boolean`
   */
  includeSubfolders: {
    key: "i18n-ally.includeSubfolders",
    default: true,
  } as ConfigItem<"i18n-ally.includeSubfolders">,
  /**
   * %config.full_reload_on_changed%
   * @key `i18n-ally.fullReloadOnChanged`
   * @default `false`
   * @type `boolean`
   */
  fullReloadOnChanged: {
    key: "i18n-ally.fullReloadOnChanged",
    default: false,
  } as ConfigItem<"i18n-ally.fullReloadOnChanged">,
  /**
   * %config.show_flags%
   * @key `i18n-ally.showFlags`
   * @default `true`
   * @type `boolean`
   */
  showFlags: {
    key: "i18n-ally.showFlags",
    default: true,
  } as ConfigItem<"i18n-ally.showFlags">,
  /**
   * %config.enabled_frameworks%
   * @key `i18n-ally.enabledFrameworks`
   * @default `undefined`
   * @type `array`
   */
  enabledFrameworks: {
    key: "i18n-ally.enabledFrameworks",
    default: undefined,
  } as ConfigItem<"i18n-ally.enabledFrameworks">,
  /**
   * %config.enabled_parsers%
   * @key `i18n-ally.enabledParsers`
   * @default `undefined`
   * @type `array`
   */
  enabledParsers: {
    key: "i18n-ally.enabledParsers",
    default: undefined,
  } as ConfigItem<"i18n-ally.enabledParsers">,
  /**
   * %config.keys_in_use%
   * @key `i18n-ally.keysInUse`
   * @default `undefined`
   * @type `array`
   */
  keysInUse: {
    key: "i18n-ally.keysInUse",
    default: undefined,
  } as ConfigItem<"i18n-ally.keysInUse">,
  /**
   * %config.sort_keys%
   * @key `i18n-ally.sortKeys`
   * @default `false`
   * @type `boolean`
   */
  sortKeys: {
    key: "i18n-ally.sortKeys",
    default: false,
  } as ConfigItem<"i18n-ally.sortKeys">,
  /**
   * %config.sort_compare%
   * @key `i18n-ally.sortCompare`
   * @default `"binary"`
   * @type `string`
   */
  sortCompare: {
    key: "i18n-ally.sortCompare",
    default: "binary",
  } as ConfigItem<"i18n-ally.sortCompare">,
  /**
   * %config.sort_locale%
   * @key `i18n-ally.sortLocale`
   * @default `undefined`
   * @type `string`
   */
  sortLocale: {
    key: "i18n-ally.sortLocale",
    default: undefined,
  } as ConfigItem<"i18n-ally.sortLocale">,
  /**
   * %config.preferred_delimiter%
   * @key `i18n-ally.preferredDelimiter`
   * @default `"-"`
   * @type `string`
   */
  preferredDelimiter: {
    key: "i18n-ally.preferredDelimiter",
    default: "-",
  } as ConfigItem<"i18n-ally.preferredDelimiter">,
  /**
   * %config.readonly%
   * @key `i18n-ally.readonly`
   * @default `false`
   * @type `boolean`
   */
  readonly: {
    key: "i18n-ally.readonly",
    default: false,
  } as ConfigItem<"i18n-ally.readonly">,
  /**
   * %config.keep_fulfill%
   * @key `i18n-ally.keepFulfilled`
   * @default `false`
   * @type `boolean`
   */
  keepFulfilled: {
    key: "i18n-ally.keepFulfilled",
    default: false,
  } as ConfigItem<"i18n-ally.keepFulfilled">,
  /**
   * %config.locale_country_map%
   * @key `i18n-ally.localeCountryMap`
   * @default `{}`
   * @type `object`
   */
  localeCountryMap: {
    key: "i18n-ally.localeCountryMap",
    default: {},
  } as ConfigItem<"i18n-ally.localeCountryMap">,
  /**
   * %config.indent%
   * @key `i18n-ally.indent`
   * @default `2`
   * @type `number`
   */
  indent: {
    key: "i18n-ally.indent",
    default: 2,
  } as ConfigItem<"i18n-ally.indent">,
  /**
   * %config.disable_path_parsing%
   * @key `i18n-ally.disablePathParsing`
   * @default `false`
   * @type `boolean`
   */
  disablePathParsing: {
    key: "i18n-ally.disablePathParsing",
    default: false,
  } as ConfigItem<"i18n-ally.disablePathParsing">,
  /**
   * %config.tab_style%
   * @key `i18n-ally.tabStyle`
   * @default `"space"`
   * @type `string`
   */
  tabStyle: {
    key: "i18n-ally.tabStyle",
    default: "space",
  } as ConfigItem<"i18n-ally.tabStyle">,
  /**
   * %config.namespace%
   * @key `i18n-ally.namespace`
   * @default `undefined`
   * @type `boolean`
   */
  namespace: {
    key: "i18n-ally.namespace",
    default: undefined,
  } as ConfigItem<"i18n-ally.namespace">,
  /**
   * %config.path_matcher%
   * @key `i18n-ally.pathMatcher`
   * @default `undefined`
   * @type `string`
   */
  pathMatcher: {
    key: "i18n-ally.pathMatcher",
    default: undefined,
  } as ConfigItem<"i18n-ally.pathMatcher">,
  /**
   * %config.language_tag_system%
   * @key `i18n-ally.languageTagSystem`
   * @default `"bcp47"`
   * @type `string`
   */
  languageTagSystem: {
    key: "i18n-ally.languageTagSystem",
    default: "bcp47",
  } as ConfigItem<"i18n-ally.languageTagSystem">,
  /**
   * %config.ignore_files%
   * @key `i18n-ally.ignoreFiles`
   * @default `undefined`
   * @type `array`
   */
  ignoreFiles: {
    key: "i18n-ally.ignoreFiles",
    default: undefined,
  } as ConfigItem<"i18n-ally.ignoreFiles">,
  /**
   * 
   * @key `i18n-ally.theme.annotation`
   * @default `"rgba(153, 153, 153, .8)"`
   * @type `string`
   */
  themeAnnotation: {
    key: "i18n-ally.theme.annotation",
    default: "rgba(153, 153, 153, .8)",
  } as ConfigItem<"i18n-ally.theme.annotation">,
  /**
   * 
   * @key `i18n-ally.theme.annotationMissing`
   * @default `"rgba(153, 153, 153, .3)"`
   * @type `string`
   */
  themeAnnotationMissing: {
    key: "i18n-ally.theme.annotationMissing",
    default: "rgba(153, 153, 153, .3)",
  } as ConfigItem<"i18n-ally.theme.annotationMissing">,
  /**
   * 
   * @key `i18n-ally.theme.annotationBorder`
   * @default `"rgba(153, 153, 153, .2)"`
   * @type `string`
   */
  themeAnnotationBorder: {
    key: "i18n-ally.theme.annotationBorder",
    default: "rgba(153, 153, 153, .2)",
  } as ConfigItem<"i18n-ally.theme.annotationBorder">,
  /**
   * 
   * @key `i18n-ally.theme.annotationMissingBorder`
   * @default `"rgba(153, 153, 153, .2)"`
   * @type `string`
   */
  themeAnnotationMissingBorder: {
    key: "i18n-ally.theme.annotationMissingBorder",
    default: "rgba(153, 153, 153, .2)",
  } as ConfigItem<"i18n-ally.theme.annotationMissingBorder">,
  /**
   * %config.regex_key%
   * @key `i18n-ally.regex.key`
   * @default `undefined`
   * @type `string`
   */
  regexKey: {
    key: "i18n-ally.regex.key",
    default: undefined,
  } as ConfigItem<"i18n-ally.regex.key">,
  /**
   * %config.regex_usage_match%
   * @key `i18n-ally.regex.usageMatch`
   * @default `undefined`
   * @type `array`
   */
  regexUsageMatch: {
    key: "i18n-ally.regex.usageMatch",
    default: undefined,
  } as ConfigItem<"i18n-ally.regex.usageMatch">,
  /**
   * %config.regex_usage_match_append%
   * @key `i18n-ally.regex.usageMatchAppend`
   * @default `undefined`
   * @type `array`
   */
  regexUsageMatchAppend: {
    key: "i18n-ally.regex.usageMatchAppend",
    default: undefined,
  } as ConfigItem<"i18n-ally.regex.usageMatchAppend">,
  /**
   * %config.refactor_templates%
   * @key `i18n-ally.refactor.templates`
   * @default `undefined`
   * @type `array`
   */
  refactorTemplates: {
    key: "i18n-ally.refactor.templates",
    default: undefined,
  } as ConfigItem<"i18n-ally.refactor.templates">,
  /**
   * %config.translate_save_as_candidates%
   * @key `i18n-ally.translate.saveAsCandidates`
   * @default `false`
   * @type `boolean`
   */
  translateSaveAsCandidates: {
    key: "i18n-ally.translate.saveAsCandidates",
    default: false,
  } as ConfigItem<"i18n-ally.translate.saveAsCandidates">,
  /**
   * %config.translate.fallbackToKey%
   * @key `i18n-ally.translate.fallbackToKey`
   * @default `false`
   * @type `boolean`
   */
  translateFallbackToKey: {
    key: "i18n-ally.translate.fallbackToKey",
    default: false,
  } as ConfigItem<"i18n-ally.translate.fallbackToKey">,
  /**
   * %config.translate.engines%
   * @key `i18n-ally.translate.engines`
   * @default `["google"]`
   * @type `array`
   */
  translateEngines: {
    key: "i18n-ally.translate.engines",
    default: ["google"],
  } as ConfigItem<"i18n-ally.translate.engines">,
  /**
   * %config.translate.parallels%
   * @key `i18n-ally.translate.parallels`
   * @default `5`
   * @type `number`
   */
  translateParallels: {
    key: "i18n-ally.translate.parallels",
    default: 5,
  } as ConfigItem<"i18n-ally.translate.parallels">,
  /**
   * %config.prompt_translating_source%
   * @key `i18n-ally.translate.promptSource`
   * @default `false`
   * @type `boolean`
   */
  translatePromptSource: {
    key: "i18n-ally.translate.promptSource",
    default: false,
  } as ConfigItem<"i18n-ally.translate.promptSource">,
  /**
   * %config.translate_override_existing%
   * @key `i18n-ally.translate.overrideExisting`
   * @default `false`
   * @type `boolean`
   */
  translateOverrideExisting: {
    key: "i18n-ally.translate.overrideExisting",
    default: false,
  } as ConfigItem<"i18n-ally.translate.overrideExisting">,
  /**
   * %config.google_api_key%
   * @key `i18n-ally.translate.google.apiKey`
   * @default `null`
   * @type `string`
   */
  translateGoogleApiKey: {
    key: "i18n-ally.translate.google.apiKey",
    default: null,
  } as ConfigItem<"i18n-ally.translate.google.apiKey">,
  /**
   * %config.deepl_api_key%
   * @key `i18n-ally.translate.deepl.apiKey`
   * @default `null`
   * @type `string`
   */
  translateDeeplApiKey: {
    key: "i18n-ally.translate.deepl.apiKey",
    default: null,
  } as ConfigItem<"i18n-ally.translate.deepl.apiKey">,
  /**
   * %config.baidu_appid%
   * @key `i18n-ally.translate.baidu.appid`
   * @default `null`
   * @type `string`
   */
  translateBaiduAppid: {
    key: "i18n-ally.translate.baidu.appid",
    default: null,
  } as ConfigItem<"i18n-ally.translate.baidu.appid">,
  /**
   * %config.baidu_app_secret%
   * @key `i18n-ally.translate.baidu.apiSecret`
   * @default `null`
   * @type `string`
   */
  translateBaiduApiSecret: {
    key: "i18n-ally.translate.baidu.apiSecret",
    default: null,
  } as ConfigItem<"i18n-ally.translate.baidu.apiSecret">,
  /**
   * %config.deepl_log%
   * @key `i18n-ally.translate.deepl.enableLog`
   * @default `false`
   * @type `boolean`
   */
  translateDeeplEnableLog: {
    key: "i18n-ally.translate.deepl.enableLog",
    default: false,
  } as ConfigItem<"i18n-ally.translate.deepl.enableLog">,
  /**
   * %config.deepl_use_free_api_entry%
   * @key `i18n-ally.translate.deepl.useFreeApiEntry`
   * @default `false`
   * @type `boolean`
   */
  translateDeeplUseFreeApiEntry: {
    key: "i18n-ally.translate.deepl.useFreeApiEntry",
    default: false,
  } as ConfigItem<"i18n-ally.translate.deepl.useFreeApiEntry">,
  /**
   * %config.libretranslate_api_root%
   * @key `i18n-ally.translate.libre.apiRoot`
   * @default `"http://localhost:5000"`
   * @type `string`
   */
  translateLibreApiRoot: {
    key: "i18n-ally.translate.libre.apiRoot",
    default: "http://localhost:5000",
  } as ConfigItem<"i18n-ally.translate.libre.apiRoot">,
  /**
   * %config.openai_api_key%
   * @key `i18n-ally.translate.openai.apiKey`
   * @default `null`
   * @type `string`
   */
  translateOpenaiApiKey: {
    key: "i18n-ally.translate.openai.apiKey",
    default: null,
  } as ConfigItem<"i18n-ally.translate.openai.apiKey">,
  /**
   * %config.openai_api_root%
   * @key `i18n-ally.translate.openai.apiRoot`
   * @default `"https://api.openai.com"`
   * @type `string`
   */
  translateOpenaiApiRoot: {
    key: "i18n-ally.translate.openai.apiRoot",
    default: "https://api.openai.com",
  } as ConfigItem<"i18n-ally.translate.openai.apiRoot">,
  /**
   * %config.openai_api_model%
   * @key `i18n-ally.translate.openai.apiModel`
   * @default `"gpt-3.5-turbo"`
   * @type `string`
   */
  translateOpenaiApiModel: {
    key: "i18n-ally.translate.openai.apiModel",
    default: "gpt-3.5-turbo",
  } as ConfigItem<"i18n-ally.translate.openai.apiModel">,
  /**
   * %config.usage.scanning_ignore%
   * @key `i18n-ally.usage.scanningIgnore`
   * @default `undefined`
   * @type `array`
   */
  usageScanningIgnore: {
    key: "i18n-ally.usage.scanningIgnore",
    default: undefined,
  } as ConfigItem<"i18n-ally.usage.scanningIgnore">,
  /**
   * %config.derived_keys%
   * @key `i18n-ally.usage.derivedKeyRules`
   * @default `null`
   * @type `array`
   */
  usageDerivedKeyRules: {
    key: "i18n-ally.usage.derivedKeyRules",
    default: null,
  } as ConfigItem<"i18n-ally.usage.derivedKeyRules">,
  /**
   * 
   * @key `i18n-ally.frameworks.ruby-rails.scopeRoot`
   * @default `"app/views"`
   * @type `string`
   */
  frameworksRubyRailsScopeRoot: {
    key: "i18n-ally.frameworks.ruby-rails.scopeRoot",
    default: "app/views",
  } as ConfigItem<"i18n-ally.frameworks.ruby-rails.scopeRoot">,
  /**
   * 
   * @key `i18n-ally.parsers.typescript.tsNodePath`
   * @default `"node_modules/ts-node/dist/bin.js"`
   * @type `string`
   */
  parsersTypescriptTsNodePath: {
    key: "i18n-ally.parsers.typescript.tsNodePath",
    default: "node_modules/ts-node/dist/bin.js",
  } as ConfigItem<"i18n-ally.parsers.typescript.tsNodePath">,
  /**
   * 
   * @key `i18n-ally.parsers.typescript.compilerOptions`
   * @default `{}`
   * @type `object`
   */
  parsersTypescriptCompilerOptions: {
    key: "i18n-ally.parsers.typescript.compilerOptions",
    default: {},
  } as ConfigItem<"i18n-ally.parsers.typescript.compilerOptions">,
  /**
   * 
   * @key `i18n-ally.parsers.extendFileExtensions`
   * @default `{}`
   * @type `object`
   */
  parsersExtendFileExtensions: {
    key: "i18n-ally.parsers.extendFileExtensions",
    default: {},
  } as ConfigItem<"i18n-ally.parsers.extendFileExtensions">,
  /**
   * %config.review_enabled%
   * @key `i18n-ally.review.enabled`
   * @default `true`
   * @type `boolean`
   */
  reviewEnabled: {
    key: "i18n-ally.review.enabled",
    default: true,
  } as ConfigItem<"i18n-ally.review.enabled">,
  /**
   * %config.review_gutters%
   * @key `i18n-ally.review.gutters`
   * @default `true`
   * @type `boolean`
   */
  reviewGutters: {
    key: "i18n-ally.review.gutters",
    default: true,
  } as ConfigItem<"i18n-ally.review.gutters">,
  /**
   * %config.review_username%
   * @key `i18n-ally.review.user.name`
   * @default `undefined`
   * @type `string`
   */
  reviewUserName: {
    key: "i18n-ally.review.user.name",
    default: undefined,
  } as ConfigItem<"i18n-ally.review.user.name">,
  /**
   * %config.review_email%
   * @key `i18n-ally.review.user.email`
   * @default `undefined`
   * @type `string`
   */
  reviewUserEmail: {
    key: "i18n-ally.review.user.email",
    default: undefined,
  } as ConfigItem<"i18n-ally.review.user.email">,
  /**
   * %config.review_remove_on_resolved%
   * @key `i18n-ally.review.removeCommentOnResolved`
   * @default `false`
   * @type `boolean`
   */
  reviewRemoveCommentOnResolved: {
    key: "i18n-ally.review.removeCommentOnResolved",
    default: false,
  } as ConfigItem<"i18n-ally.review.removeCommentOnResolved">,
  /**
   * %config.editor_prefer_editor%
   * @key `i18n-ally.editor.preferEditor`
   * @default `false`
   * @type `boolean`
   */
  editorPreferEditor: {
    key: "i18n-ally.editor.preferEditor",
    default: false,
  } as ConfigItem<"i18n-ally.editor.preferEditor">,
  /**
   * %config.keygen_strategy%
   * @key `i18n-ally.extract.keygenStrategy`
   * @default `"slug"`
   * @type `string`
   */
  extractKeygenStrategy: {
    key: "i18n-ally.extract.keygenStrategy",
    default: "slug",
  } as ConfigItem<"i18n-ally.extract.keygenStrategy">,
  /**
   * %config.keygen_style%
   * @key `i18n-ally.extract.keygenStyle`
   * @default `"default"`
   * @type `string`
   */
  extractKeygenStyle: {
    key: "i18n-ally.extract.keygenStyle",
    default: "default",
  } as ConfigItem<"i18n-ally.extract.keygenStyle">,
  /**
   * %config.key_prefix%
   * @key `i18n-ally.extract.keyPrefix`
   * @default `""`
   * @type `string`
   */
  extractKeyPrefix: {
    key: "i18n-ally.extract.keyPrefix",
    default: "",
  } as ConfigItem<"i18n-ally.extract.keyPrefix">,
  /**
   * %config.key_max_length%
   * @key `i18n-ally.extract.keyMaxLength`
   * @default `null`
   * @type `number`
   */
  extractKeyMaxLength: {
    key: "i18n-ally.extract.keyMaxLength",
    default: null,
  } as ConfigItem<"i18n-ally.extract.keyMaxLength">,
  /**
   * %config.target_picking_strategy%
   * @key `i18n-ally.extract.targetPickingStrategy`
   * @default `"none"`
   * @type `string`
   */
  extractTargetPickingStrategy: {
    key: "i18n-ally.extract.targetPickingStrategy",
    default: "none",
  } as ConfigItem<"i18n-ally.extract.targetPickingStrategy">,
  /**
   * Parser options for extracting HTML, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
   * @key `i18n-ally.extract.parsers.html`
   * @default `{}`
   * @type `object`
   */
  extractParsersHtml: {
    key: "i18n-ally.extract.parsers.html",
    default: {},
  } as ConfigItem<"i18n-ally.extract.parsers.html">,
  /**
   * Parser options for extracting JS/TS/JSX/TSX, see https://github.com/lokalise/i18n-ally/blob/master/src/extraction/parsers/options.ts
   * @key `i18n-ally.extract.parsers.babel`
   * @default `{}`
   * @type `object`
   */
  extractParsersBabel: {
    key: "i18n-ally.extract.parsers.babel",
    default: {},
  } as ConfigItem<"i18n-ally.extract.parsers.babel">,
  /**
   * Enables hard-coded strings detection automatically whenever opening a supported file
   * @key `i18n-ally.extract.autoDetect`
   * @default `false`
   * @type `boolean`
   */
  extractAutoDetect: {
    key: "i18n-ally.extract.autoDetect",
    default: false,
  } as ConfigItem<"i18n-ally.extract.autoDetect">,
  /**
   * Strings to be ignored on hard-coded strings detection
   * @key `i18n-ally.extract.ignored`
   * @default `undefined`
   * @type `array`
   */
  extractIgnored: {
    key: "i18n-ally.extract.ignored",
    default: undefined,
  } as ConfigItem<"i18n-ally.extract.ignored">,
  /**
   * Strings to be ignored on hard-coded strings detection, by files
   * @key `i18n-ally.extract.ignoredByFiles`
   * @default `{}`
   * @type `object`
   */
  extractIgnoredByFiles: {
    key: "i18n-ally.extract.ignoredByFiles",
    default: {},
  } as ConfigItem<"i18n-ally.extract.ignoredByFiles">,
  /**
   * 
   * @key `i18n-ally.parserOptions`
   * @default `{}`
   * @type `object`
   */
  parserOptions: {
    key: "i18n-ally.parserOptions",
    default: {},
  } as ConfigItem<"i18n-ally.parserOptions">,
  /**
   * %config.default_namespace%
   * @key `i18n-ally.defaultNamespace`
   * @default `undefined`
   * @type `string`
   */
  defaultNamespace: {
    key: "i18n-ally.defaultNamespace",
    default: undefined,
  } as ConfigItem<"i18n-ally.defaultNamespace">,
  /**
   * 
   * @key `i18n-ally.derivedKeyRules`
   * @default `undefined`
   * @type `undefined`
   */
  derivedKeyRules: {
    key: "i18n-ally.derivedKeyRules",
    default: undefined,
  } as ConfigItem<"i18n-ally.derivedKeyRules">,
  /**
   * 
   * @key `i18n-ally.filenameMatchRegex`
   * @default `undefined`
   * @type `undefined`
   */
  filenameMatchRegex: {
    key: "i18n-ally.filenameMatchRegex",
    default: undefined,
  } as ConfigItem<"i18n-ally.filenameMatchRegex">,
  /**
   * 
   * @key `i18n-ally.fileNamespace`
   * @default `undefined`
   * @type `undefined`
   */
  fileNamespace: {
    key: "i18n-ally.fileNamespace",
    default: undefined,
  } as ConfigItem<"i18n-ally.fileNamespace">,
  /**
   * 
   * @key `i18n-ally.keyMatchRegex`
   * @default `undefined`
   * @type `undefined`
   */
  keyMatchRegex: {
    key: "i18n-ally.keyMatchRegex",
    default: undefined,
  } as ConfigItem<"i18n-ally.keyMatchRegex">,
  /**
   * 
   * @key `vue-i18n-ally.localesPaths`
   * @default `undefined`
   * @type `undefined`
   */
  vueI18nAllyLocalesPaths: {
    key: "vue-i18n-ally.localesPaths",
    default: undefined,
  } as ConfigItem<"vue-i18n-ally.localesPaths">,
  /**
   * 
   * @key `vue-i18n-ally.encoding`
   * @default `undefined`
   * @type `undefined`
   */
  vueI18nAllyEncoding: {
    key: "vue-i18n-ally.encoding",
    default: undefined,
  } as ConfigItem<"vue-i18n-ally.encoding">,
  /**
   * 
   * @key `vue-i18n-ally.sourceLanguage`
   * @default `undefined`
   * @type `undefined`
   */
  vueI18nAllySourceLanguage: {
    key: "vue-i18n-ally.sourceLanguage",
    default: undefined,
  } as ConfigItem<"vue-i18n-ally.sourceLanguage">,
  /**
   * 
   * @key `vue-i18n-ally.displayLanguage`
   * @default `undefined`
   * @type `undefined`
   */
  vueI18nAllyDisplayLanguage: {
    key: "vue-i18n-ally.displayLanguage",
    default: undefined,
  } as ConfigItem<"vue-i18n-ally.displayLanguage">,
  /**
   * 
   * @key `vue-i18n-ally.ignoredLocales`
   * @default `undefined`
   * @type `undefined`
   */
  vueI18nAllyIgnoredLocales: {
    key: "vue-i18n-ally.ignoredLocales",
    default: undefined,
  } as ConfigItem<"vue-i18n-ally.ignoredLocales">,
  /**
   * 
   * @key `vue-i18n-ally.keystyle`
   * @default `undefined`
   * @type `undefined`
   */
  vueI18nAllyKeystyle: {
    key: "vue-i18n-ally.keystyle",
    default: undefined,
  } as ConfigItem<"vue-i18n-ally.keystyle">,
  /**
   * 
   * @key `vue-i18n-ally.dirStructure`
   * @default `undefined`
   * @type `undefined`
   */
  vueI18nAllyDirStructure: {
    key: "vue-i18n-ally.dirStructure",
    default: undefined,
  } as ConfigItem<"vue-i18n-ally.dirStructure">,
  /**
   * 
   * @key `vue-i18n-ally.annotations`
   * @default `undefined`
   * @type `undefined`
   */
  vueI18nAllyAnnotations: {
    key: "vue-i18n-ally.annotations",
    default: undefined,
  } as ConfigItem<"vue-i18n-ally.annotations">,
  /**
   * 
   * @key `vue-i18n-ally.annotationMaxLength`
   * @default `undefined`
   * @type `undefined`
   */
  vueI18nAllyAnnotationMaxLength: {
    key: "vue-i18n-ally.annotationMaxLength",
    default: undefined,
  } as ConfigItem<"vue-i18n-ally.annotationMaxLength">,
  /**
   * 
   * @key `vue-i18n-ally.annotationDelimiter`
   * @default `undefined`
   * @type `undefined`
   */
  vueI18nAllyAnnotationDelimiter: {
    key: "vue-i18n-ally.annotationDelimiter",
    default: undefined,
  } as ConfigItem<"vue-i18n-ally.annotationDelimiter">,
  /**
   * 
   * @key `vue-i18n-ally.filenameMatchRegex`
   * @default `undefined`
   * @type `undefined`
   */
  vueI18nAllyFilenameMatchRegex: {
    key: "vue-i18n-ally.filenameMatchRegex",
    default: undefined,
  } as ConfigItem<"vue-i18n-ally.filenameMatchRegex">,
  /**
   * 
   * @key `vue-i18n-ally.includeSubfolders`
   * @default `undefined`
   * @type `undefined`
   */
  vueI18nAllyIncludeSubfolders: {
    key: "vue-i18n-ally.includeSubfolders",
    default: undefined,
  } as ConfigItem<"vue-i18n-ally.includeSubfolders">,
  /**
   * 
   * @key `vue-i18n-ally.fullReloadOnChanged`
   * @default `undefined`
   * @type `undefined`
   */
  vueI18nAllyFullReloadOnChanged: {
    key: "vue-i18n-ally.fullReloadOnChanged",
    default: undefined,
  } as ConfigItem<"vue-i18n-ally.fullReloadOnChanged">,
  /**
   * 
   * @key `vue-i18n-ally.sortKeys`
   * @default `undefined`
   * @type `undefined`
   */
  vueI18nAllySortKeys: {
    key: "vue-i18n-ally.sortKeys",
    default: undefined,
  } as ConfigItem<"vue-i18n-ally.sortKeys">,
  /**
   * 
   * @key `vue-i18n-ally.preferredDelimiter`
   * @default `undefined`
   * @type `undefined`
   */
  vueI18nAllyPreferredDelimiter: {
    key: "vue-i18n-ally.preferredDelimiter",
    default: undefined,
  } as ConfigItem<"vue-i18n-ally.preferredDelimiter">,
  /**
   * 
   * @key `vue-i18n-ally.readonly`
   * @default `undefined`
   * @type `undefined`
   */
  vueI18nAllyReadonly: {
    key: "vue-i18n-ally.readonly",
    default: undefined,
  } as ConfigItem<"vue-i18n-ally.readonly">,
}

export interface ScopedConfigKeyTypeMap {
  "disabled": boolean,
  "autoDetection": boolean,
  "localesPaths": (string | string[] | undefined),
  "encoding": string,
  "sourceLanguage": (string | undefined),
  "displayLanguage": (string | undefined),
  "ignoredLocales": (unknown[] | undefined),
  "keystyle": ("auto" | "nested" | "flat" | undefined),
  "dirStructure": ("auto" | "file" | "dir" | undefined),
  "annotations": boolean,
  "annotationInPlace": boolean,
  "annotationMaxLength": number,
  "annotationDelimiter": string,
  "includeSubfolders": boolean,
  "fullReloadOnChanged": boolean,
  "showFlags": boolean,
  "enabledFrameworks": (("vue" | "react" | "vscode" | "ngx-translate" | "i18next" | "react-i18next" | "i18next-shopify" | "i18n-tag" | "flutter" | "vue-sfc" | "ember" | "chrome-ext" | "ruby-rails" | "custom" | "laravel" | "transloco" | "svelte" | "globalize" | "ui5" | "next-translate" | "php-gettext" | "general" | "lingui" | "jekyll" | "fluent-vue" | "fluent-vue-sfc" | "next-intl" | "next-international")[] | undefined),
  "enabledParsers": (("js" | "ts" | "json" | "json5" | "yaml" | "ini" | "po" | "php" | "properties" | "ftl")[] | undefined),
  "keysInUse": (string[] | undefined),
  "sortKeys": boolean,
  "sortCompare": ("binary" | "locale"),
  "sortLocale": (string | undefined),
  "preferredDelimiter": string,
  "readonly": boolean,
  "keepFulfilled": boolean,
  "localeCountryMap": Record<string, unknown>,
  "indent": number,
  "disablePathParsing": boolean,
  "tabStyle": ("space" | "tab"),
  "namespace": (boolean | undefined),
  "pathMatcher": (string | undefined),
  "languageTagSystem": ("bcp47" | "legacy" | "none"),
  "ignoreFiles": (unknown[] | undefined),
  "theme.annotation": string,
  "theme.annotationMissing": string,
  "theme.annotationBorder": string,
  "theme.annotationMissingBorder": string,
  "regex.key": (string | undefined),
  "regex.usageMatch": (string[] | undefined),
  "regex.usageMatchAppend": (string[] | undefined),
  "refactor.templates": ({ 'source': ("html-attribute" | "html-inline" | "js-string" | "js-template" | "jsx-text"); 'template': string; 'templates': string[]; 'include': string[]; 'exclude': string[] }[] | undefined),
  "translate.saveAsCandidates": boolean,
  "translate.fallbackToKey": boolean,
  "translate.engines": ("google" | "google-cn" | "deepl" | "libretranslate" | "baidu" | "openai")[],
  "translate.parallels": number,
  "translate.promptSource": boolean,
  "translate.overrideExisting": boolean,
  "translate.google.apiKey": (string | null),
  "translate.deepl.apiKey": (string | null),
  "translate.baidu.appid": (string | null),
  "translate.baidu.apiSecret": (string | null),
  "translate.deepl.enableLog": boolean,
  "translate.deepl.useFreeApiEntry": boolean,
  "translate.libre.apiRoot": string,
  "translate.openai.apiKey": (string | null),
  "translate.openai.apiRoot": string,
  "translate.openai.apiModel": ("gpt-3.5-turbo" | "gpt-3.5-turbo-16k" | "gpt-3.5-turbo-0301" | "gpt-3.5-turbo-0613" | "gpt-4" | "gpt-4-0314" | "gpt-4-0613" | "gpt-4-32k" | "gpt-4-32k-0314" | "gpt-4-32k-0613"),
  "usage.scanningIgnore": (string[] | undefined),
  "usage.derivedKeyRules": (string[] | null),
  "frameworks.ruby-rails.scopeRoot": string,
  "parsers.typescript.tsNodePath": string,
  "parsers.typescript.compilerOptions": Record<string, unknown>,
  "parsers.extendFileExtensions": Record<string, unknown>,
  "review.enabled": boolean,
  "review.gutters": boolean,
  "review.user.name": (string | undefined),
  "review.user.email": (string | undefined),
  "review.removeCommentOnResolved": boolean,
  "editor.preferEditor": boolean,
  "extract.keygenStrategy": ("slug" | "random" | "empty" | "source"),
  "extract.keygenStyle": ("default" | "kebab-case" | "snake_case" | "camelCase" | "PascalCase" | "ALL_CAPS"),
  "extract.keyPrefix": string,
  "extract.keyMaxLength": (number | null),
  "extract.targetPickingStrategy": ("none" | "most-similar" | "most-similar-by-key" | "file-previous" | "global-previous"),
  "extract.parsers.html": Record<string, unknown>,
  "extract.parsers.babel": Record<string, unknown>,
  "extract.autoDetect": boolean,
  "extract.ignored": (string[] | undefined),
  "extract.ignoredByFiles": Record<string, unknown>,
  "parserOptions": Record<string, unknown>,
  "defaultNamespace": (string | undefined),
  "derivedKeyRules": (unknown | undefined),
  "filenameMatchRegex": (unknown | undefined),
  "fileNamespace": (unknown | undefined),
  "keyMatchRegex": (unknown | undefined),
}

export const scopedConfigs = {
  scope: "i18n-ally",
  defaults: {
    "disabled": false,
    "autoDetection": true,
    "localesPaths": undefined,
    "encoding": "utf-8",
    "sourceLanguage": undefined,
    "displayLanguage": undefined,
    "ignoredLocales": undefined,
    "keystyle": undefined,
    "dirStructure": undefined,
    "annotations": true,
    "annotationInPlace": true,
    "annotationMaxLength": 40,
    "annotationDelimiter": "¬∑",
    "includeSubfolders": true,
    "fullReloadOnChanged": false,
    "showFlags": true,
    "enabledFrameworks": undefined,
    "enabledParsers": undefined,
    "keysInUse": undefined,
    "sortKeys": false,
    "sortCompare": "binary",
    "sortLocale": undefined,
    "preferredDelimiter": "-",
    "readonly": false,
    "keepFulfilled": false,
    "localeCountryMap": {},
    "indent": 2,
    "disablePathParsing": false,
    "tabStyle": "space",
    "namespace": undefined,
    "pathMatcher": undefined,
    "languageTagSystem": "bcp47",
    "ignoreFiles": undefined,
    "theme.annotation": "rgba(153, 153, 153, .8)",
    "theme.annotationMissing": "rgba(153, 153, 153, .3)",
    "theme.annotationBorder": "rgba(153, 153, 153, .2)",
    "theme.annotationMissingBorder": "rgba(153, 153, 153, .2)",
    "regex.key": undefined,
    "regex.usageMatch": undefined,
    "regex.usageMatchAppend": undefined,
    "refactor.templates": undefined,
    "translate.saveAsCandidates": false,
    "translate.fallbackToKey": false,
    "translate.engines": ["google"],
    "translate.parallels": 5,
    "translate.promptSource": false,
    "translate.overrideExisting": false,
    "translate.google.apiKey": null,
    "translate.deepl.apiKey": null,
    "translate.baidu.appid": null,
    "translate.baidu.apiSecret": null,
    "translate.deepl.enableLog": false,
    "translate.deepl.useFreeApiEntry": false,
    "translate.libre.apiRoot": "http://localhost:5000",
    "translate.openai.apiKey": null,
    "translate.openai.apiRoot": "https://api.openai.com",
    "translate.openai.apiModel": "gpt-3.5-turbo",
    "usage.scanningIgnore": undefined,
    "usage.derivedKeyRules": null,
    "frameworks.ruby-rails.scopeRoot": "app/views",
    "parsers.typescript.tsNodePath": "node_modules/ts-node/dist/bin.js",
    "parsers.typescript.compilerOptions": {},
    "parsers.extendFileExtensions": {},
    "review.enabled": true,
    "review.gutters": true,
    "review.user.name": undefined,
    "review.user.email": undefined,
    "review.removeCommentOnResolved": false,
    "editor.preferEditor": false,
    "extract.keygenStrategy": "slug",
    "extract.keygenStyle": "default",
    "extract.keyPrefix": "",
    "extract.keyMaxLength": null,
    "extract.targetPickingStrategy": "none",
    "extract.parsers.html": {},
    "extract.parsers.babel": {},
    "extract.autoDetect": false,
    "extract.ignored": undefined,
    "extract.ignoredByFiles": {},
    "parserOptions": {},
    "defaultNamespace": undefined,
    "derivedKeyRules": undefined,
    "filenameMatchRegex": undefined,
    "fileNamespace": undefined,
    "keyMatchRegex": undefined,
  } satisfies ScopedConfigKeyTypeMap,
}

